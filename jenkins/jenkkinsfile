// Define variable
//def myVariable = "foo"

pipeline {
  agent any

  options {
    timestamps()
    timeout(time: 2, unit: 'HOURS')
  }

  environment {
        DC_IMAGE_NAME       = "node-app"
        // ARTVERSION       = "${env.BUILD_ID}"
        ARTVERSION          = "v2"
        DOCKER_IMAGE_REPO   = "repo.local"
        CHART_NAME          = "hamid-node"
    }
  stages {
    stage('Checkout Code') {
      steps {
        milestone(ordinal: null, label: "Milestone: Checkout")
        git(url: 'https://github.com/hamidrgholipour/node-project-CICD-k8S', branch: 'master')
      }
    }  
    // stage('Test') {
    //     agent { 
    //     docker { image 'node:20.9.0-alpine3.18' }
    //   }        
    //   steps {
    //     milestone(ordinal: null, label: "Milestone: Test")
    //     sh """
    //       cd app
    //       npm install
    //       npm run test
    //     """ 
    //   }
    //   post {
    //     always {
    //         archiveArtifacts artifacts: 'app/junit.xml', fingerprint: true
    //         junit 'app/junit.xml'
    //         }
    //     }
    // }

    // stage('trivy') {
    //     agent { 
    //     docker { image 'aquasec/trivy:latest' }
    //   }
    //   steps {
    //     sh 'version'
    //   }
    // }   

    // stage('Build') {
    //   steps {
    //     milestone(ordinal: null, label: "Milestone: Build")
    //     sh 'echo Bulding'
    //     script{
    //       // docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
    //       //   myapp.push("latest")
    //       //   myapp.push("${ARTVERSION}")
    //       //     }
    //       //myapp = docker.build( "${DOCKER_IMAGE_REPO}/${DC_IMAGE_NAME}:${ARTVERSION}")
    //       myapp = docker.build( "${DC_IMAGE_NAME}:${ARTVERSION}")
    //     }
    //   }
    // }

    stage('change helm variable'){
      agent { label 'kuber-ssh' }
      steps {
              sh '''
                // echo "changing version"
                // sed -i 's/tag: "${ARTVERSION}"/tag: "${ARTVERSION}"/' kuber-helm/values.yaml
                //sed -i 's/replicaCount: 3/replicaCount: 1/' kuber-helm/values.yaml
              '''
      }
    }
    stage('K8S helm') {
      agent { label 'kuber-ssh' }
      steps {
        milestone(ordinal: null, label: "Milestone: K8S helm")
        //terragruntInit()
        
        sh '''
          echo "changing version"
          sed -i 's/tag: "${ARTVERSION}"/tag: "${ARTVERSION}"/' kuber-helm/values.yaml
          // sed -i 's/replicaCount: 3/replicaCount: 1/' kuber-helm/values.yaml
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          helm list
          helm upgrade hamid-node ./kuber-helm/ --install
          '''
      }
    }
    // stage('Deploying React.js container to Kubernetes') {
    //   agent { label 'kuber' }
    //   steps {
    //     script {
    //       sh 'pwd && ls -la'
    //       kubernetesDeploy(configs: "./kuber/app/dp-app.yml")
    //     }
    //   }
    // }
  }
}